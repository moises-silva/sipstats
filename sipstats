#!/usr/bin/env python

import sys
import pyshark
from recordclass import recordclass
from pprint import pprint

cap = sys.argv[0]
stnames = [
    "pktcnt",
    "max_size",
    "min_size",
    "invite_count",
    "uniq_callids",
    "invite_unique",
    "non_sip_count",
    "req_count",
    "resp_count",
    "invite_rate_max",
]
Stats = recordclass("Stats", stnames)
s = Stats(*[0] * len(stnames))

callids = set()
inv_calls = set()
non_sip = []
first_inv_sec = None
inv_rate = 0


def update_inv_rate(rsec, is_invite):
    global first_inv_sec, inv_rate, s

    if first_inv_sec is None and is_invite:
        first_inv_sec = rsec

    if rsec == first_inv_sec and is_invite:
        inv_rate += 1

    if first_inv_sec is not None and rsec > first_inv_sec:
        s.invite_rate_max = max(s.invite_rate_max, inv_rate)
        inv_rate = 1
        first_inv_sec = rsec


cap = pyshark.FileCapture(sys.argv[1])
for p in cap:
    s.pktcnt += 1
    s.max_size = max(s.max_size, int(p.captured_length))
    s.min_size = min(s.max_size, int(p.captured_length))
    rsec = p.frame_info.time_relative.split(".")[0]

    if not hasattr(p, "sip"):
        s.non_sip_count += 1
        non_sip.append(p)
        # Could be a fragmented udp packet
        if not hasattr(p, "DATA"):
            print("Error: No DATA in pkt {}".format(p.number))
            continue
        # Get data array skipping udp header
        data = p.DATA.data_data.split(":")[8:]
        bdata = []
        for byte in data:
            bdata.append(chr(int(byte, 16)))
        stdata = "".join(bdata)

        # Best effort parsing, no support for multi header
        siparr = stdata.split("\r\n")
        reqline = siparr[0]
        headers = {}
        for ln in siparr[1:]:
            # Skip SDP
            if not ln.strip():
                break
            parts = ln.split(":", 1)
            name = parts[0].strip().lower()
            val = parts[1].strip()
            headers[name] = val
        method = reqline.split(" ", 1)[0]
        call_id = headers["call-id"] if "call-id" in headers else None
        if call_id:
            callids.add(call_id)
        if method == "INVITE":
            s.invite_count += 1
            if call_id and call_id not in inv_calls:
                inv_calls.add(call_id)
            update_inv_rate(rsec, True)
        else:
            update_inv_rate(rsec, True)
        continue

    sip = p.sip
    call_id = sip.call_id if hasattr(sip, "call_id") else None
    if hasattr(sip, "request_line"):
        s.req_count += 1
        if sip.method == "INVITE":
            s.invite_count += 1
            if call_id and call_id not in inv_calls:
                s.invite_unique += 1
                inv_calls.add(call_id)
            update_inv_rate(rsec, True)
    else:
        update_inv_rate(rsec, False)

    if hasattr(sip, "status_line"):
        s.resp_count += 1

    if call_id:
        callids.add(sip.call_id)


s.uniq_callids = len(callids)
s.invite_unique = len(inv_calls)
pprint(dict(s._asdict()))
